操作系統：是一個用來協調、管理和控制計算機硬件和軟件資源的系統程序，它位於硬件和應用程序之間。

進程定義：進程本質上就是一個程序的運行過程。(為一個抽象的概念 => 不運行時是程序，運行時是進程)
    ◇ 進程一般由程序、數據集(運行過程中所需的資源)、進程控制塊(用於保存/讀取狀態)組成。
        → 數據集為程序在執行過程中所需要使用的資源。
        → 進程控制塊用來記錄進程的外部特徵，描述進程的執行變化過程，系統可以利用它來控制和管理進程，它是系
           統感知進程存在的唯一標誌。
    ◇ 一個應用程序能有多個進程
    ◇ 為什麼要有進程? 因為為了達到多道程序併發

線程定義：也叫輕量級進程，它是一個基本的CPU執行單元，也是程序執行過程中的最小單元。
    ◇ 同一個進程內的線程共享同一個記憶體。
    ◇ 同一個進程中的多個線程之間可以並發執行
    ◇ 一個線程可以創建和撤銷另一個線程
    ◇ 線程的引入減小了程序並發執行時的開銷，提高了操作系統的並發性能。線程沒有自己的系統資源。

協程定義：協作式，相對於搶占式(進程、線程)的一種非搶占式程序(程序切換全依程序員決定)
    ◇ yeild → 底層協程關鍵詞
    ◇ 關鍵點 → 什麼時候需要切換？
    ◇ 本質上也是線程，只是在物理層面的消耗更小
    協程優點：
        1.沒有切換的消耗
        2.沒有鎖的概念 → 因為是非搶占式且操縱於我們
    協程劣勢：
        1.一樣不能用多核  => 解決：多進程+協程

◎ 一個程序至少有一個進程,一個進程至少有一個線程.(進程可以理解成線程的容器)。
◎ 進程在執行過程中擁有獨立的內存單元，而多個線程共享內存，從而極大地提高了程序的運行效率。
◎ 線程不能夠獨立執行，必須依存在應用程序中，由應用程序提供多個線程執行控制。
◎ 進程是最小的資源單位；線程是最小的執行單位


併發與併行：
    併發：指系統具有處理多個任務(動作)的能力，可透過進程間的切換來完成
    併行：指系統具有【同時】處理多個任務(動作)的能力，透過多核cpu來完成
    → 併行為併發中的一種

同步與異步：
    同步：當進程執行到I/O操作(等待外部數據)時，會等的話就是同步(會等到數據接收成功後再繼續執行)
    異步：當進程執行到I/O操作(等待外部數據)時，會【不】等的話就是同步(先處理別的，等到數據接收成功後再回來處理)

CPython的GIL(全局解釋鎖)：
    ◇ 會阻止多個線程同時執行。
    ◇ 無論開啟多少個線程，有多少個cpu, Python在執行的時候在同一時刻只允許一個線程運行
    ◇ 解決方法：
        1.多進程(把任務分到不同的進程中)
        2.協程

任務類型：
    I/O密集型：很多CPU空閒時間 => 可以使用【多線程】，因為在處理I/O操作時能換其他線程使用CPU
                               => 也可以使用【多進程+協程】，效果更好
    CPU密集型：很少CPU空閒時間 => Python不適合，得採用其他語言

