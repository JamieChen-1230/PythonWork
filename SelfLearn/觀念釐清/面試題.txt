面試題：
- Python特性：
    - Python是一種解釋型語言，這意味著，與C，C++不同，Python不需要在運行之前進行編譯。它是邊運行邊解釋的。
    - Python是動態類型化的，不需要聲明變量的類型。
    - Python中函數是一等對象，這意味著它們可以在運行時動態創建，能賦值給變量或者作為參數傳給函數，還能作為函數的返回值。
    - Python運行速度通常比編譯語言慢。但Python允許包含基於C的擴展，所以瓶頸可以被優化掉。

- Python引號：
    - 單個單、雙引號都是用來表示字符串。
    - 三單引號一般用來輸入多行文本。
    - 三雙引號一般用在類里面，用來註釋類。

- Python函數參數：
    - 位置(必選)參數： def foo(x, y)
    - 默認參數： def foo(x, y=10)   ※ 注意默認參數(y)要放在必選參數(x)後面，且默認參數不要設為可變對象(可先用None代替)。
        def add_end(L=None):
            if L is None:
                L = [] L.append('END')
            return L
    - 可變參數：def foo(x, y ,*args)
    - 關鍵字參數： def foo(x, y ,**kwargs)
    - 命名關鍵字參數： def person(name, age, *, city, job)  ※ 命名關鍵字參數需要一個特殊分隔符*，*後面的參數被視為命名關鍵字參數。


- lambda 表達式：
    通常是在需要一個函數，但是又不想費神去命名一個函數的場合下使用，也就是指匿名函數。

- 字符串格式化(%和.format的區別)：
    %在於使用時方便，但format較為靈活與強大，可以做到格式限定符(比如:填充、對齊、精度等)。

- Python多線程：
    Python有一個多線程包threading，可以使用多線程來加快你的代碼。但是Python有一個叫做GIL的構造。
    它限制了python同一時間只能有一個線程執行，所以多線程們實際上只是輪流使用相同的CPU內核。
        - 對於IO密集型操作：在等待操作系統返回時會釋放GIL；再比如爬蟲因為有等待的服務器的響應時間，可以利用多線程來加速。
        - 對於CPU密集型操作：只能通過多進程Multiprocess來加速。

- 對restful api的認識：
    其實它本質上是一個規範，讓我們寫API時，可以更好的去做區分，也更容易讓後臺去處理，
    也讓前端工程師也更容易的去記住URL，並透過URL體現出API的操作。
    https://www.cnblogs.com/wupeiqi/articles/7805382.html

- 狀態碼有哪些：
    200 OK - [GET]：服務器成功返回用戶請求的數據，該操作是冪等的（Idempotent）。
    201 CREATED - [POST/PUT/ PATCH]：用戶新建或修改數據成功。
    202 Accepted - [* ]：表示一個請求已經進入後台排隊（異步任務）
    204 NO CONTENT - [DELETE]：用戶刪除數據成功。
    400 INVALID REQUEST - [POST/PUT/ PATCH]：用戶發出的請求有錯誤，服務器沒有進行新建或修改數據的操作，該操作是冪等的。
    401 Unauthorized - [* ]：表示用戶沒有權限（令牌、用戶名、密碼錯誤）。
    403 Forbidden - [* ]表示用戶得到授權（與401錯誤相對），但是訪問是被禁止的。
    404 NOT FOUND - [* ]：用戶發出的請求針對的是不存在的記錄，服務器沒有進行操作，該操作是冪等的。
    406 Not Acceptable - [GET]：用戶請求的格式不可得（比如用戶請求JSON格式，但是只有XML格式）。
    410 Gone - [GET]：用戶請求的資源被永久刪除，且不會再得到的。
    422 Unprocesable entity - [POST/PUT/ PATCH]當創建一個對象時，發生一個驗證錯誤。
    500 INTERNAL SERVER ERROR - [* ]：服務器發生錯誤，用戶將無法判斷發出的請求是否成功。

- 何謂面向對象：
    面向對象有三大特徵：
        封裝：
            把想同類型的屬性和方法封裝到類中，這樣可以簡化編程，使用者也可以僅通過外部接口來調用。
        繼承：
            繼承就是子類繼承父類的特徵和行為，使得子類對象具有父類的實例和方法，
            這樣可以減少重複性代碼，且彼此的耦合度會較低，靈活度也較高。
        多態：
            不同的(子類)對象調用相同的(父類)方法，產生不同的結果，可以增加代碼的外部調用靈活度。

- Django中間件：
    在django中，中間件其實就是一個類，在request到來和結束後，django會在合適的時機執行中間件中相應的方法。

- Django生命週期：
    瀏覽器 -> wsgi -process_request-> 路由系統 -process_views-> 視圖函數（和ORM、Template處理完後）-process_response-> 瀏覽器
    wsgi(web server gateway interface)：web伺服器網關街口，是python中web伺服器和web應用的一種規範。
        - wsgiref：是Django默認實現wsgi協議的一個模塊，用來做一個socket服務端。
        - uwsgi：也是實現wsgi協議的一個模塊，用來做socket服務端，速度比wsgiref快很多。

- mutable/immutable：
    是指變數被賦值以後，值可不可以改變。以list來說，li = ['a', 'b']，對應到內存的一個id位置；然後再讓li[0] = 'c'，
    這時li還是指向同一個位置，表示這個列表這個type就是可變的。
        - 可變：list, set, dict, array
        - 不可變：數值, str, bytes, tuple

- list和array比較：
    - list：方便，可以容納不同的數據類型，但較慢且也要耗費更多得記憶體空間。
    - array：只能容納一種數據類型，較快也較省空間。
        - 原因：一、一開始陣列內部的型態定義就定義好了，所以不會需要每次都到底層的去做比對
                二、因為array是直接儲存數據而非指針，所以相較於list還要去遍歷所有指針會快很多

- tuple和list比較：
    兩者最大的差異就在於元組是不可變的。但元組佔用空間較少，也可以當作字典的key做使用，
    且具名元祖可以理解為元組的增強版本，它為元組中的每個元素都賦予了含義，從而增強代碼可讀性。

- dict和list比較：
    一、字典的查找速度比列表快很多，但也因此要耗費較大的內存。
        - 原因：dict和set都是由hash和散列表來實現的。
                    - 散列表中的每一個表元都是相同大小的，所以查找時可以通過偏移量來進行。
                    - 查找時會通過基層的演算法用hash(key)進行匹對。
    二、字典和集合是無序的，列表是有序的。

- git基礎：
    一、Git可以分為 Local（本地）和 Remote（遠端）兩個環境。
        - Local：
            分為working directory（工作資料夾）、staging area（暫存區）和 repositories（倉庫）
    二、在自己開發時：
            - 上傳：工作資料夾 --add--> 暫存區 --commit--> 本地倉庫 --push--> 遠端倉庫
            - 下載更新：git pull <遠程主機名> <遠程分支名>:<本地分支名>
                - 等同於 git fetch(抓取遠端的branch) + git merge(將遠端branch和本地branch合併)